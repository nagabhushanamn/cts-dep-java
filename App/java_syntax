

------------------------------------------------------------------------

  1. Java-Project
  
  
    proj
    |
    |
    |----- pack1  ( .java / .class )
    | | 
    | |----pack12
    |
    |----- pack2
    |
    |
    
    ==============================================================
    
    2. Java File ( Abc.java )
    
    |--------------------------------------------
    |
    | // package dec ( 1 )  ( optional )
    | // import statements ( n ) ( optional )
    |
    | // public class Abc( 1 ) ( must )
    |
    | // default classes ( n ) ( optional )
    |
    ---------------------------------------------
    
    ================================================================
    
    
    3. package dec
    
       folder which contains related java files of any module.
       
       why we need ?
       
       --> for better maintenance.
       --> to avoid naming collisions on Types ( class , interface , enum , Annotation )
       
       
       syntax
       
       package root;
               root.sub1.sub2;
               
               
       guideline from experts to write package names
       
       e.g
       
       Employee.java
       
           module  : emp
           project : EM
           comp    : CTS
           type    : com        
       
       package ctype.cname.pname.mname;
       
       e.g
       
       package com.cts.em.emp;
       
       
   ================================================================
  
   4. import statements
   
   	proj
   	
      p1  --> A.java , B.java
      p2  --> C.Java , D.java 
  
  
  
   e.g
   
     package p1;
     import p2.C;  or import p2.*;
     		
     public class A{
     
     B b;
     C c;
     
     }
   
   syntax:
   
   import pack.ClassName;
   import pack.*;
   import pack.sub1.*;
   
   JDK 1.5
   
   import static pack.ClassName.* ; // to import static memeber from any class
   
   
   ================================================================
   
   
   Object Oriented Concepts  
   
   
   what is object ?
   
     --> data,info,prop,attr   ( state )
     --> work,func,method,oprn ( behav )
     --> address,reference,loc ( identity )
     
     obj ===> SBI
     
     -------------------------------------------------
     
     e.g 
     
     many employees  ( similar objs )
     
     --> same state-def  ( with different values )
     --> same-behav      ( returns different result )
     
     
     object's blue-print/template/description ===> class
     
     -------------------------------------------------
     
     class   ===> object ( instance of class )
     
     --------------------------------------------------
     
   
     object oriented concepts
     
     
     --> Abstraction
     --> Encapsulation
     --> Inheritance
     --> polymorphic
     
     -------------------------------------------------
     
     types of objects
     
      a. dependent
      b. dependency
     
     
     A.Abstraction ( Front-End / Interface / What you see on that object )
     
     
     why we need ?
     
     --> easy to use/learn by dependent-obj
     --> loose-coupling 
     
     
     B.Encapsulation ( Back-End / Implementation )
     
     why we need ?
     
     --> functionality of an obj.
     --> to hide complexity
     --> for security reason
     
     
     C. Inheritence
     
     
     e.g   JavaEmployee , JSEmployee , TestEmployee
     
           Employee
     
     
           re-use/inherit common things from mode generalized-class to specialized-classes
     
           why we need ?
           
           --> re-use
           --> easy to to extend current system
           
           
      D. Ploymorphism
      
      
        e.g
        
            trainer ( e.g nag )     
            
              doTeach(sub,mode)
              
                   
         why we need ?
         
         can implement ' closed for modification and open for extension ' OO principle  
     
     
     ------------------------------------------------------------------------------------
     
     java --> OO P lang
     
     -------------------------------------------------------------------------------------
   
     
     
     
     5. class syntax
     -----------------
     
	________	___________      class Name [extends] BaseClass {
	[public]    [abstract]            		[implements] Interface1,Interface2
	[      ]    [final   ]
	    		[strictfp]             
							      // state-def --> variables
							      
							      // constructor(s)
							      
							      // behav    ---> methods
							      
							      // Inner class
	---------------------------					      
	[public]	[static]				      
	[private]					      
	[protected]					      
	[        ]			   
   
                                }
                                
                                
   
  ----------------------------------------------------------------------------------------------- 
  
   6. variables ( data in lang )
   
   
      types of data-type
      
      1. primitive ( 8 )
      2. reference 
      
      e.g
      
      class Mobile{
      
      }
      
      class Employee{
        
        // class/static var
        
        final static String compName="CTS";
        static String trainer;
        
        // object/instance var
        int id;
        String name; 
      	int age;  // primitive/simple
      	Mobile mobile; // reference
      	
      	public void method(){
      	
      		int loc;  // local var
      	
      	}
      	
      	
      	public static void teach(){}
      	public void listen(){}
      	
      	
      	
      }
      
   
   
   
		_______       _________  DataType name = [value / object ];
		[public]       [static ]
		[private]      [final  ]
		[protected]    [volatile]
		[       ]      [transient]
  
  		local-val
        ---------------------------
        - Nil -        [final]
      
   
   -----------------------------------------------------------------------------------------------
   
   
   7. methods  --> behav
   
   			ReturnType
   			
   			 --> void
   			 --> primitive
   			 --> reference
   
   
		__________     _________   ReturnType methodName([args]) [throws] CheckedException{
		[public]       [static]    
		[private]	   [final ]			// A,R,L and Assigment oprn
		[protected]	   [strictfp]	    // Conditional statements
		[         ]	   [synchronized]	// Looping staments
					   [abstract]	    // Invoke other method
					   [native]	           
						          		 [return] [result]
						           
						           
						           		}
					   
   
   -----------------------------------------------------------------------------------------------
   
   
   8. constructor - syntax
   
   in java , object creation 2 step process
   
     a. memory allocation  --> 'new'
     b. initialize memory with obj's data --> constructor
     
     obj ===> new Constructor()
     
     
     imp note : every class has 'one' default constructor when no constructors are defined
     
     
     
	 _________   _______ ClassName([args])[throws] CheckedException{
	 [public]					       // logic to initialize obj.
	 [private]			 }
	 [protected]
	 [         ]  
	   
   -----------------------------------------------------------------------------------------------
   
   
   
   9. Interface
   
   
_______   ______ interface Name [extends] Interce1,Interface2{
[public]    
                  // constant-state
                  public static final DataType name=value;
                  
                  // behav
                  
                  public abstract ReturnType methodName([args])[throws]Exception
                  
                  // From JDK 1.8
                  
                  public default ReturnType method(){
                    // logic...
                  }
                  
                  public static ReturnType staMethod(){
                  
                  }
                  

   		          }
   		          
  -----------------------------------------------------------------------------------------------
  
  
  10. Enum Type
  
  
   why we need ?
   
   to group related constants with type
   
   
   ______   enum Gender{
   [public] 		  
   			MALE,FEMALE,OTHER
   
           }        
   
   
   -----------------------------------------------------------------------------------------------
   
   
   11. Annotations
   
   
   to describe java programs for others ( compiler , runtime , tools and frameworks )
   
   
   public   @interface Name{
   
   // props...
   
   
   }
   
   
    -----------------------------------------------------------------------------------------------
    
    
   Java Naming-Conventions
   ----------------------------
   
   
   keywords  --> lower-case
   package-names --> lower-case
   Type Names ( class , interface , enum , annotations  )  ---> pascal-case e.g 'JavaEmployee'  
   var/method names  --> camel-case  e.g  myName , myMethod
   constant-names     --> upper-case
   
   
   
   
   
   
   
   
   
  
  
  